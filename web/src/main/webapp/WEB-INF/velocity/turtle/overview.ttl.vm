entry:$entry.getUniqueName() 
## ----------------- PROTEIN EXISTENCE -----------------------------
    :existence      :$entry.overview.history.proteinExistence;
## ----------------- FAMILIES ------------------------------------------
#if($entry.overview.families.size() > 0)
#foreach($family in $entry.overview.families)
    :family [
       rdf:type :FamilyInfo ;
       :accession term:$StringUtils.slug($family.accession) ;
#if($family.region)
       :region "$family.region"^^xsd:string ;
#end
       :description "$family.description"^^xsd:string ;
      ];
#end
#end## ----------------- PROTEIN NAMES ---------------------------------
#if($entry.overview.proteinNames)
#foreach($entityName in $entry.overview.proteinNames)
    #parse('turtle/entity-name.ttl.vm')
#end
#end
## ----------------- ADDITIONAL NAMES ---------------------------------
#if($entry.overview.additionalNames)
    :additionalNames[ 
        rdf:type :NameList;
#foreach($entityName in $entry.overview.additionalNames)
    #parse('turtle/entity-name.ttl.vm')
#end
    ];
#end
## ----------------- FUNCTIONAL REGION NAMES ---------------------------
#if($entry.overview.functionalRegionNames)
    :fonctionalRegionNames[
        rdf:type :NameList;
#foreach($entityName in $entry.overview.functionalRegionNames)
        #parse('turtle/entity-name.ttl.vm')
#end
    ];
#end
## ----------------- CLEAVED REGION NAMES ------------------------------
#if($entry.overview.cleavedRegionNames)
    :cleavedRegionNames[
        rdf:type :NameList;
#foreach($entityName in $entry.overview.cleavedRegionNames)
        #parse('turtle/entity-name.ttl.vm')
#end
    ];
#end
## ----------------- BIOPHYSICALCHEMICAL properties --------------------
#if($entry.overview.bioPhyChemProps.size() > 0)
#foreach($prop in $entry.overview.bioPhyChemProps)
    :biophysicochemical[  
        :name "$prop.getFirst()"^^xsd:string;
        :value "$prop.getSecond()"^^xsd:string;
    ];
#end 
#end
## ----------------- HISTORY ----------------------------------------
#if($entry.overview.history.nextprotIntegrationDate)
    :history[
      rdf:type :History;
      :name "neXtProt"^^xsd:string; 
      :integrated "$entry.overview.history.getFormattedNextprotIntegrationDate()"^^xsd:string; 
      :updated "$entry.overview.history.getFormattedNextprotUpdateDate()"^^xsd:string;
    ];
#end
#if($entry.overview.history.uniprotIntegrationDate)
    :history[   
        rdf:type :History;
        :name "UniProtKB"^^xsd:string;
        :integrated "$entry.overview.history.getFormattedUniprotIntegrationDate()"^^xsd:string;
        :updated "$entry.overview.history.getFormattedUniprotUpdateDate()"^^xsd:string;
        :version "$entry.overview.history.uniprotVersion"^^xsd:string;
        :lastSequenceUpdate "$entry.overview.history.lastSequenceUpdate"^^xsd:string;
        :sequenceVersion "$entry.overview.history.sequenceVersion"^^xsd:string;
    ];    
#end
    .
