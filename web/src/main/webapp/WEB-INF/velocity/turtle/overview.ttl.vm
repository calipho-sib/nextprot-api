entry:$entry.getUniqueName()
#set($entryUniqueName = $entry.getUniqueName())
## ----------------- PROTEIN EXISTENCE -----------------------------
    :existence      :$entry.overview.getProteinExistence().descriptionName;
## ----------------- FAMILIES ------------------------------------------
#if($entry.overview.families.size() > 0)
#foreach($family in $entry.overview.families)
    :family [
       rdf:type :FamilyInfo ;
       :term cv:$StringUtils.slug($family.accession) ;
#if($family.region)
       :region "$family.region"^^xsd:string ;
#end
       :description "$family.description"^^xsd:string ;
      ].
#end
#end## ----------------- PROTEIN NAMES ---------------------------------
#set($className = "Name")
#set($qualifier = "fullName")
#if($entry.overview.proteinNames)
#foreach($entityName in $entry.overview.proteinNames)
#set($className = "ProteinName")
#set($altNamesCount = 0)
#set($parentName = 0)
#set($parentUri = "")
#parse('turtle/entity-name.ttl.vm')
#end
#end## ----------------- GENE NAMES ---------------------------------
#set($className = "Name")
#set($qualifier = "fullName")
#if($entry.overview.geneNames)
#foreach($geneName in $entry.overview.geneNames)
#set($className = "GeneName")
#set($altNamesCount = 0)
#set($orfNamesCount = 0)
#set($parentName = 0)
#set($parentUri = "")
#parse('turtle/gene-name.ttl.vm')
#end
#end

## ----------------- ADDITIONAL NAMES ---------------------------------
#if($entry.overview.additionalNames)
##entry:$entry.getUniqueName() :additionalNames[
##        rdf:type :NameList;
#foreach($entityName in $entry.overview.additionalNames)
#set($className = "Name")
#set($parentName = 0)
#set($parentUri = "")
#parse('turtle/entity-name.ttl.vm')
#end
## ]..
#end
## ----------------- FUNCTIONAL REGION NAMES ---------------------------
#if($entry.overview.functionalRegionNames)
##entry:$entry.getUniqueName() :fonctionalRegionNames[
##        rdf:type :NameList;
#foreach($entityName in $entry.overview.functionalRegionNames)
#set($className = "RegionName")
#set($parentName = 0)
#set($parentUri = "")
#parse('turtle/entity-name.ttl.vm')
#end
##]...
#end
## ----------------- CLEAVED REGION NAMES ------------------------------
#if($entry.overview.cleavedRegionNames)
##entry:$entry.getUniqueName() :cleavedRegionNames[
##rdf:type :NameList;
#foreach($entityName in $entry.overview.cleavedRegionNames)
#set($className = "CleavedRegionName")
#set($parentName = 0)
#set($parentUri = "")
#parse('turtle/entity-name.ttl.vm')
#end
##]....
#end
## ----------------- BIOPHYSICALCHEMICAL properties --------------------
#if($entry.overview.bioPhyChemProps.size() > 0)
entry:$entry.getUniqueName()
#foreach($prop in $entry.overview.bioPhyChemProps)
    :biophysicochemical[  
        :name "$prop.getFirst()"^^xsd:string;
        :value "$prop.getSecond()"^^xsd:string;
    ].
#end 
#end
## ----------------- HISTORY ----------------------------------------
#if($entry.overview.history.nextprotIntegrationDate)
entry:$entry.getUniqueName() :history[
      rdf:type :History;
      :name "neXtProt"^^xsd:string; 
      :integrated "$entry.overview.history.getFormattedNextprotIntegrationDate()"^^xsd:string; 
      :updated "$entry.overview.history.getFormattedNextprotUpdateDate()"^^xsd:string;
    ].
#end
#if($entry.overview.history.uniprotIntegrationDate)
entry:$entry.getUniqueName() :history[
        rdf:type :History;
        :name "UniProtKB"^^xsd:string;
        :integrated "$entry.overview.history.getFormattedUniprotIntegrationDate()"^^xsd:string;
        :updated "$entry.overview.history.getFormattedUniprotUpdateDate()"^^xsd:string;
        :version "$entry.overview.history.uniprotVersion"^^xsd:string;
        :lastSequenceUpdate "$entry.overview.history.lastSequenceUpdate"^^xsd:string;
        :sequenceVersion "$entry.overview.history.sequenceVersion"^^xsd:string;
    ].
#end

